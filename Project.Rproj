---
title: "loan_prediction"
author: Anil Bulusu
output: html_document
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

Importing the libraries
```{r}

library(tidyverse)
library(gplots)
library(ggplot2)
library(corrplot)
library(GGally)
library(caret)
library(ggthemes)
library(DT)
```


IMporting the datasets:
```{r}
loan_df=read.csv('loan.csv')
head(loan_df)
```


Estimating the total number of values present across all columns
```{r}

percentage_x=sapply(loan_df, function(y) sum(!is.na(y))/nrow(loan_df)*100)
```


We will only consider the columns  with more than 95% of values
```{r}
condn_chk=percentage_x[percentage_x>=95]
imp_cols_df=data.frame(condn_chk)  
imp_cols <- as.data.frame(t(imp_cols_df))
colnames(imp_cols)
```
People have borrowed loans for various reasons. Understanding the borrower's purpose for loan using a  PIE chart
```{r}
loan_df %>% group_by(purpose) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>% 
  ggplot(aes(x = reorder(purpose, pct), y = pct)) + geom_bar(stat = "identity", fill = "purple", aes(color = I('black')), size = 0.1) + 
xlab("Purpose of Loan") + ylab("Percent")+ coord_flip()
```

People have borrowed from any states across USA. Out of which, people from California have borrowed the most
```{r}

options(repr.plot.width=6, repr.plot.height=20)
#vii. State
loan_df %>% group_by(addr_state) %>% dplyr::summarise(count=n()) %>% mutate(pct=count/sum(count))%>% 
  ggplot(aes(x = reorder(addr_state, pct), y = pct)) + geom_bar(stat = "identity", fill = "lightblue2", aes(color = I('black')), size = 0.1) + 
xlab("State Wise Loan") + ylab("Percent")+ coord_flip()

```

One of the important factors in calculating the credit history of an individual is the Tenure of an individual. The work experience of an individual influences the credit history.


```{r}
ggplot(loan_df,aes(x=emp_length,fill=emp_length))+geom_bar(stat="count")+labs(x="Employment Length",title="Distribution of Employment Length")


```

Loan amounts are distributed across various grades. Out of all grades, Grade B and C have the most loan volume

```{r}
ggplot(loan_df,aes(x=grade,fill=grade))+geom_bar(stat="count")+labs(x="GRADE CATEGORIES",title="Grades with respective loan amounts")
```

Some borrowers have  owned a house while some have rented. The ownership status of Borrowers are represented by a Bar chart

```{r}
barplot(prop.table(table(loan_df$home_ownership)))
```


Let us check with a scatter plot if there's  a relationship between the loan_amount and the funded_amount

```{r}
ggplot(loan_df, aes(x=loan_amnt, y=funded_amnt)) + geom_point(shape=1) + geom_smooth(method=lm)
```


FEATURE SELECTION

Based on the descriptive statistics we performed,we select only the features that are important for the Modelling. The selected features are loan_status , loan_amnt , int_rate , grade , emp_length , home_ownership ,annual_inc and term.

```{r}

loan_final=loan_df %>%
        select(loan_status , loan_amnt , int_rate , grade , emp_length , home_ownership , 
               annual_inc , term)
```

We will remove the missing value rows from the annual  income and also the rows that contain the category 'NONE' and 'ANY' in the home_ownership column

```{r}

loan_final = loan_final %>%
        filter(!is.na(annual_inc) , 
               !(home_ownership %in% c('NONE' , 'ANY')) , 
               emp_length != 'n/a')
```

The frequency of different loan status

```{r}
loan_df %>%
        count(loan_status) %>%
        ggplot(aes(x = reorder(loan_status , desc(n)) , y = n , fill = n)) + 
        geom_col() + 
        coord_flip() + 
        labs(x = 'Loan Status' , y = 'Count')
```


There are 10 different loan status. So for the ease of analysis, we group them to just two categories, default and non-default. We will create a new feature called loan_final_status and store the results in binary (0 and  1). If the loan_status = ‘Charged Off’ or ‘Default’ then loan_final_status will be 1. If the loan_status = ‘Fully Paid', then loan_final_status will be 0.

```{r}

loan_final = loan_final%>%
        mutate(loan_final_status = ifelse(loan_status %in% c('Charged Off' , 'Default') , 
                                     1, 
                                     ifelse(loan_status == 'Fully Paid' , 0 , 'No info')
                                     ))

barplot(table(loan_final$loan_final_status) , col = 'lightblue')
```

For the accuracy  of modelling, we will consider the rows that contain only 0 and 1 in the loan_final_status.

```{r}

loan_final = loan_final %>%
        select(-loan_status) %>%
        filter(loan_final_status %in% c(0 , 1))
```

Let's  explore the relationship between the interest rate and the grade of the loans.It is common that better the grade, lower is the interest rate.

```{r}

ggplot(loan_final , aes(x = grade , y = int_rate , fill = grade)) + 
        geom_boxplot() + 
        theme_igray() + 
        labs(y = 'Interest Rate' , x = 'Grade')
```

Among different grades, group of people who have paid and have not paid.

```{r}
table(loan_final$grade , factor(loan_final$loan_final_status , c(0 , 1) , c('Fully Paid','Default')))
```

```{r}

ggplot(loan_final , aes(x = grade , y = ..count.. , fill = factor(loan_final_status , c(1 , 0) , c('Default' , 'Fully Paid')))) + 
        geom_bar() + 
        theme(legend.title = element_blank())
```

We split the dataset into training and test set. 

```{r}
loan_final$loan_final_status = as.numeric(loan_final$loan_final_status)
split_1 = sample(dim(loan_final)[1] , 0.75*dim(loan_final)[1] , replace = F)
trainset = loan_final[split_1 , ]
testset = loan_final[-split_1 , ]
```


Fitting the logistic regression for classification

```{r}

glm.model = glm(loan_final_status ~ . , trainset , family = binomial(link = 'logit'))
summary(glm.model)
```

The probability of defaulting on a credit is directly proportional to Loan amount, interest rate,term and better grade where the probability of defaulting on a credit is inversely proportional to Annual income, home ownership-own and rent and with borrowers with 10 years of experience.

Prediciting the probability of defaulting:
```{r}
preds = predict(glm.model , testset , type = 'response')

# Density of probabilities
ggplot(data.frame(preds) , aes(preds)) + 
        geom_density(fill = 'lightblue' , alpha = 0.4) +
        labs(x = 'Predicted Probabilities on test set')

```


We will set the threshold to 50% (0.5). That is if the probability of defaulting is greater than 0.5, it will be grouped as 1 and if the  probability is  less than 0.5, then it will be considered as 0.

```{r}
pred_0.50 = ifelse(preds > 0.5 , 1 , 0)
confusion_matrix_0.50 = table(Predicted = pred_0.50 , Actual = testset$loan_final_status)
confusion_matrix_0.50
confusionMatrix(confusion_matrix_0.50)
```


Keeping the thresold as 0.3

```{r}
pred_0.30 = ifelse(preds > 0.3 , 1 , 0)
confusion_matrix_0.30 = table(Predicted = pred_0.30 , Actual = testset$loan_final_status)
confusion_matrix_0.30
confusionMatrix(confusion_matrix_0.30)
```

Keeping the thresold as 0.6
```{r}
pred_0.60 = ifelse(preds > 0.6 , 1 , 0)
confusion_matrix_0.60 = table(Predicted = pred_0.60 , Actual = testset$loan_final_status)
confusion_matrix_0.60
confusionMatrix(confusion_matrix_0.60)
```

On comparing the various thresold,the model with thresold 0.6 is performing better than all other models,  hence we will set the thresold to 0.6.

Calculating the area under the ROC curve.

```{r}
library(pROC)

auc(roc(testset$loan_final_status , preds))
```

PLotting the ROC curve

```{r}
plot.roc(testset$loan_final_status , preds , main = "Confidence interval of a threshold" , percent = TRUE , 
         ci = TRUE , of = "thresholds" , thresholds = "best" , print.thres = "best" , col = 'blue')
```

CONCLUSION:

We have the predicted the probability of defaulting on a credit with an accuracy of 81.89%.
We were able to attain an accuracy of 81.89% by seting the threshold to 0.6. The model performs with a specificity of 59.6% and sensitivity of 68.3%. On comparing with the naive model for the accuracy metric, the area under curve gives us an accuracy of 69.38%.  
